<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PeakFin.386</title>
    <link>https://peakfin.github.io/posts/</link>
    <description>Recent content in Posts on PeakFin.386</description>
    <generator>Hugo</generator>
    <language>kr</language>
    <lastBuildDate>Tue, 20 Aug 2024 05:08:46 +0900</lastBuildDate>
    <atom:link href="https://peakfin.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>머릿말</title>
      <link>https://peakfin.github.io/posts/graphics/preface/</link>
      <pubDate>Tue, 30 Jul 2024 11:15:48 +0900</pubDate>
      <guid>https://peakfin.github.io/posts/graphics/preface/</guid>
      <description>게임 프로그래머로써 기본적인 그래픽스에 관한 노하우를 글로 정리해 보고자 한다.&#xA;대부분 짧은 글의 형식이 될 것 같은데 종종 예제를 만들거나 코드가 추가될수도&amp;hellip;.&#xA;솔찍히 내가 딱히 기술적으로 뛰어난 개발자도 아니고 순수하게 혼자 생각을 정리하기 위한 시리즈의 글을 작성할 예정이기에 혹시라도 이 글을 보고 교정이 필요한 부분을 찾거나 하고 싶은 이야기가 있으신 분들은 블로그 하단의 메일 주소로 메일을 보내주시면 감사하겠습니다.</description>
    </item>
    <item>
      <title>그래픽스 노하우 1. 삼각형</title>
      <link>https://peakfin.github.io/posts/graphics/triangle/</link>
      <pubDate>Tue, 30 Jul 2024 12:15:48 +0900</pubDate>
      <guid>https://peakfin.github.io/posts/graphics/triangle/</guid>
      <description>삼각형은 일직선 위에 놓여있지 않은 3개의 점과 선분으로 이루어진 다각형으로 평면 상에서 가장 단순한 모양의 다각형이다.&#xA;우리가 보는 게임의 화면은 논리적으로는 3차원 공간 일수 있지만 물리적으로는 결국 평면이다. 이는 화면에 그릴 요소들을 가장 단순한 모양으로 쪼개면 삼각형 단위로 만들 수 있다는 것이다.&#xA;게임 화면은 결국 삼각형을 연속으로 그리고 있을 뿐이다. 기계적으로 깊이 들어가면 이야기가 달라지지만 게임 프로그래머로써는 일단 이 정도 이해로 충분하다고 생각한다.&#xA;openGL, openGL es, Direct x, Metal, Vulkan 에서도 모두 마찬가지라고 생각하면 된다.</description>
    </item>
    <item>
      <title>그래픽스 노하우 2. 픽셀, 파이프라인에 대한 감상</title>
      <link>https://peakfin.github.io/posts/graphics/pixel/</link>
      <pubDate>Fri, 02 Aug 2024 09:15:48 +0900</pubDate>
      <guid>https://peakfin.github.io/posts/graphics/pixel/</guid>
      <description>간략하게 각 Graphics API에서 픽셀의 최종 색을 결정하는 방법을 소개하고 파이프라인에 대한 이야기를 살짝 해보고자 한다.&#xA;개인적으로 실무에서 써본 Graphics API는 openGL, openGL es, Metal이고 DirectX와 Vulkan은 실무에서 사용해 보지는 못하고 학습만 해봤다.&#xA;각 API들은 GPU에서 그래픽을 그리는 과정의 단계들을 파이프라인으로 정의해 사용 중이고 이 파이프라인은 입력된 데이터가 화면에 그려지기까지의 순서를 규정한다. 각 단계에서는 다양한 셰이더 프로그램을 통해 개발자가 관여할 수 있다는 공통점이 있지만 어떤 API를 사용하는지와 버전에 따라 사용 가능한 셰이더의 종류와 개수는 차이가 있다.</description>
    </item>
    <item>
      <title>그래픽스 노하우 3. 메모리</title>
      <link>https://peakfin.github.io/posts/graphics/memory/</link>
      <pubDate>Tue, 06 Aug 2024 09:23:11 +0900</pubDate>
      <guid>https://peakfin.github.io/posts/graphics/memory/</guid>
      <description>컴퓨터에서 데이터를 저장하는 공간을 이야기한다. 개인적으로는 4가지로 분류해 생각하며 그 기분은 아래와 같다.&#xA;RAM (시스템 메모리) DISK (시스템 외부 저장장치) VRAM (GPU, 그래픽 카드 메모리) REGISTER (CPU 내부 저장장치) 컴퓨터에서 데이터는 위의 저장 공간들을 차지하고 버스를 통해 다른 공간으로 이동한다. 이는 단순해 보이지만 CPU나 GPU의 리소스를 꽤 잡아먹는 경우가 많다. 우리가 이사를 할 때 단순히 짐을 이동하면 되는 것 같지만 실제론 여러 노하우가 필요한 것과 마찬가지라고 생각하면 좋은데 여기서 이삿짐센터가 CPU나 GPU라고 생각하면 될 것 같다.</description>
    </item>
    <item>
      <title>그래픽스 노하우 4. CPU, GPU</title>
      <link>https://peakfin.github.io/posts/graphics/cpu_gpu/</link>
      <pubDate>Mon, 12 Aug 2024 09:21:38 +0900</pubDate>
      <guid>https://peakfin.github.io/posts/graphics/cpu_gpu/</guid>
      <description>CPU와 GPU는 컴퓨터의 연산을 담당하는 장치들이다. 게임 개발에 있어서 이 장치들에 대한 이해는 필수적이며 내 코드가 하드웨어에서 어떻게 돌아갈지 생각하는 것은 모든 프로그래머에게 필요한 자세라고 생각한다. CPU와 GPU는 각기 다른 용도를 가지고 있고 그에 따라 발전된 방향도 달라 지금에 와서는 강점을 가지는 부분이 명확히 나뉘었으며 각자의 강점을 바탕으로 협력하여 다양한 작업을 효율적으로 처리하기 때문에 개인적으로는 상호 보완적인 장치라고 생각한다.&#xA;그럼 CPU와 GPU에 대해 간락한 설명을 해보겠다.&#xA;CPU는 여러 개의 코어를 가지고 있고 각 코어는 명령을 실행할 수 있는 독립적인 장치다.</description>
    </item>
    <item>
      <title>머릿말</title>
      <link>https://peakfin.github.io/posts/cc&#43;&#43;/preface/</link>
      <pubDate>Mon, 19 Aug 2024 11:15:48 +0900</pubDate>
      <guid>https://peakfin.github.io/posts/cc&#43;&#43;/preface/</guid>
      <description>게임 클라이언트 개발자로 일을 하다 보면 결국 c, c++가 주력 언어가 될 수 밖에 없다고 생각한다.&#xA;이유는 여러 가지가 있겠지만 게임 클라이언트 개발자는 그래픽스 프로그래밍을 해야하고 그래픽스 API는 c, c++ 기반으로 만들어지기 때문이다. 상용 엔진을 사용하더라도 마찬가지이다.&#xA;그래서 가장 주력으로 삼고 있는 c, c++에 관한 이야기를 남겨보고자 한다. 그냥 그때그때 생각나거나 하고 싶은 이야기가 있으면 하나씩 글을 남겨보겠다.</description>
    </item>
    <item>
      <title>c,c&#43;&#43; 이야기 1.호출규약</title>
      <link>https://peakfin.github.io/posts/cc&#43;&#43;/calling_convention/</link>
      <pubDate>Tue, 20 Aug 2024 05:08:46 +0900</pubDate>
      <guid>https://peakfin.github.io/posts/cc&#43;&#43;/calling_convention/</guid>
      <description>이 글에서는 호출 규약에 대한 대략적인 내용과 나의 견해를 남기고자 한다.&#xA;호출 규약이란 C에서 함수를 사용할 때 함수를 호출하는 입장과 호출 받는 입장에서의 데이터 전달 방식과 스택 사용 방식에 대한 규칙이라고 할 수 있다. 주로 매개변수가 스택에 푸시되는 순서와 스택을 정리하는 주체가 누구인가, 리턴 값을 어떤 레지스터에 담을 것인가, 함수 호출 시 어떤 레지스터를 유지할 것인가를 규정한다. 이를 정하는 이유는 모든 개발자가 C로 개발을 할 때 인간의 관점에서 이해하기 쉬운 코드를 만들기 위해 함수를 사용하게 되는데 이 함수가 기계에서 돌아갈 때 동작하는 규칙을 정해야 효율적으로 사용이 가능하기 때문이다.</description>
    </item>
  </channel>
</rss>
